/**
 * ========================================
 * CONTROLLER DE URLs (urlController.js)
 * ========================================
 * 
 * Controller respons√°vel por gerenciar as opera√ß√µes relacionadas √†s URLs:
 * - Encurtamento de URLs
 * - Redirecionamento 
 * - Listagem de URLs do usu√°rio
 * - Exclus√£o de URLs
 * 
 * Este √© a camada de controle na arquitetura MVC:
 * - Recebe requisi√ß√µes HTTP
 * - Chama os services para l√≥gica de neg√≥cio
 * - Retorna respostas formatadas
 */

// Importa os services necess√°rios
const UrlService = require('../services/urlService');  // L√≥gica de neg√≥cio para URLs
const QrService = require('../services/qrService');    // Servi√ßo para gerar QR codes

/**
 * Classe UrlController
 * Cont√©m m√©todos est√°ticos para cada endpoint da API
 */
class UrlController {
    
    /**
     * Endpoint: POST /api/shorten
     * Cria uma URL encurtada a partir de uma URL original
     * 
     * @param {Object} req - Objeto da requisi√ß√£o HTTP
     * @param {Object} res - Objeto da resposta HTTP
     */
    static async shortenUrl(req, res) {
        try {
            // Chama o service para criar a URL encurtada
            // req.body cont√©m: url, customCode, title, description, expiresIn
            const result = await UrlService.createShortUrl(req.body, req);
            
            // Constr√≥i a URL completa (dom√≠nio + c√≥digo)
            const baseUrl = `${req.protocol}://${req.get('host')}`;  // http://localhost:8080
            const shortUrl = `${baseUrl}/${result.shortCode}`;       // http://localhost:8080/abc123
            
            // Gera o QR Code para a URL encurtada
            const qrCode = await QrService.generateQRCode(shortUrl);
            
            // Resposta de sucesso com todos os dados
            res.json({
                success: true,
                data: {
                    ...result,    // id, originalUrl, shortCode, title, description, etc.
                    shortUrl,     // URL completa encurtada
                    qrCode        // Data URL do QR Code
                }
            });
            
        } catch (error) {
            // Em caso de erro (valida√ß√£o, c√≥digo duplicado, etc.)
            res.status(400).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * Endpoint: GET /:code
     * Redireciona um c√≥digo encurtado para a URL original
     * Este m√©todo √© chamado quando algu√©m acessa uma URL encurtada
     * 
     * @param {Object} req - Objeto da requisi√ß√£o HTTP
     * @param {Object} res - Objeto da resposta HTTP
     */
    static async redirectUrl(req, res) {
        try {
            // Extrai o c√≥digo da URL (ex: /abc123 -> code = "abc123")
            const { code } = req.params;
            
            // Busca a URL original e registra o clique
            const originalUrl = await UrlService.handleRedirect(code, req);
            
            // Redireciona o usu√°rio para a URL original
            res.redirect(originalUrl);
            
        } catch (error) {
            // Se URL n√£o existe ou est√° expirada, mostra p√°gina de erro
            res.status(404).send(`
                <html>
                    <head>
                        <title>Link n√£o encontrado</title>
                        <meta charset="UTF-8">
                        <style>
                            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                            h1 { color: #333; }
                            p { color: #666; }
                            a { color: #588ad6; text-decoration: none; }
                        </style>
                    </head>
                    <body>
                        <h1>üòî Link n√£o encontrado</h1>
                        <p>${error.message}</p>
                        <a href="/">‚Üê Voltar ao in√≠cio</a>
                    </body>
                </html>
            `);
        }
    }

    /**
     * Endpoint: GET /api/manage
     * Lista todas as URLs criadas pelo usu√°rio atual (identificado por IP)
     * 
     * @param {Object} req - Objeto da requisi√ß√£o HTTP
     * @param {Object} res - Objeto da resposta HTTP
     */
    static async getUserUrls(req, res) {
        try {
            // Busca URLs do usu√°rio (identificado pelo IP)
            const urls = await UrlService.getUserUrls(req);
            
            // Retorna lista de URLs com informa√ß√µes formatadas
            res.json({
                success: true,
                data: urls  // Array com URLs, status, datas formatadas, etc.
            });
            
        } catch (error) {
            // Erro interno do servidor
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * Endpoint: DELETE /api/delete/:id
     * Remove uma URL espec√≠fica (apenas se pertencer ao usu√°rio)
     * 
     * @param {Object} req - Objeto da requisi√ß√£o HTTP
     * @param {Object} res - Objeto da resposta HTTP
     */
    static async deleteUrl(req, res) {
        try {
            // Extrai o ID da URL a ser removida
            const { id } = req.params;
            
            // Remove a URL (verifica se pertence ao usu√°rio)
            await UrlService.deleteUrl(id, req);
            
            // Confirma a remo√ß√£o
            res.json({
                success: true,
                message: 'URL removida com sucesso'
            });
            
        } catch (error) {
            // Erro de valida√ß√£o (URL n√£o pertence ao usu√°rio, n√£o existe, etc.)
            res.status(400).json({
                success: false,
                error: error.message
            });
        }
    }
}

// Exporta a classe para uso nas rotas
module.exports = UrlController;