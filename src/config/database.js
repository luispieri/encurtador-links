/**
 * ========================================
 * CONFIGURA√á√ÉO DO BANCO DE DADOS
 * ========================================
 * 
 * Este arquivo configura a conex√£o com o MySQL usando pool de conex√µes
 * para melhor performance e gerenciamento de recursos.
 * 
 * Funcionalidades:
 * - Configura√ß√£o do pool de conex√µes MySQL
 * - Fun√ß√£o para testar conectividade
 * - Fun√ß√£o utilit√°ria para executar queries
 * - Configura√ß√µes de seguran√ßa e performance
 */

// Carrega vari√°veis de ambiente
require('dotenv').config();

// Importa o driver MySQL2 com suporte a Promises
const mysql = require('mysql2/promise');

// ========================================
// CONFIGURA√á√ÉO DO POOL DE CONEX√ïES
// ========================================

/**
 * Configura√ß√£o do pool de conex√µes MySQL
 * Pool = gerenciador de m√∫ltiplas conex√µes reutiliz√°veis
 * Benef√≠cios: melhor performance, controle de recursos, reconex√£o autom√°tica
 */
const dbConfig = {
    // Configura√ß√µes b√°sicas de conex√£o
    host: process.env.DB_HOST || 'localhost',                    // Endere√ßo do servidor MySQL
    port: parseInt(process.env.DB_PORT) || 3306,                // Porta do MySQL (padr√£o: 3306)
    user: process.env.DB_USER || 'root',                        // Usu√°rio do banco
    password: process.env.DB_PASSWORD || '',                    // Senha (em produ√ß√£o, sempre configure!)
    database: process.env.DB_NAME || 'encurtador_links',        // Nome do banco de dados
    
    // Configura√ß√µes do pool de conex√µes
    waitForConnections: true,                                    // Aguarda conex√£o dispon√≠vel se pool estiver cheio
    connectionLimit: parseInt(process.env.DB_CONNECTION_LIMIT) || 15,  // M√°ximo de conex√µes simult√¢neas
    queueLimit: 0,                                             // Sem limite na fila de espera
    
    // Timeouts para evitar conex√µes travadas
    acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT) || 60000,  // Timeout para obter conex√£o (60s)
    timeout: parseInt(process.env.DB_TIMEOUT) || 60000,                 // Timeout para queries (60s)
    
    // Configura√ß√µes de seguran√ßa
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,  // SSL se configurado
    
    // Configura√ß√µes de charset e timezone
    charset: 'utf8mb4',                                        // Suporte completo a Unicode (incluindo emojis)
    timezone: '+00:00',                                        // UTC para consist√™ncia global
    
    // Nota: reconnect foi depreciado, o pool j√° gerencia reconex√µes automaticamente
};

// Cria o pool de conex√µes com as configura√ß√µes definidas
const pool = mysql.createPool(dbConfig);

// ========================================
// FUN√á√ïES UTILIT√ÅRIAS
// ========================================

/**
 * Testa a conectividade com o banco de dados
 * √ötil para verificar se as configura√ß√µes est√£o corretas
 * 
 * @returns {Promise<boolean>} true se conectou com sucesso, false caso contr√°rio
 */
async function testConnection() {
    try {
        // Obt√©m uma conex√£o do pool para teste
        const connection = await pool.getConnection();
        console.log('‚úÖ Conectado ao MySQL com sucesso!');
        
        // IMPORTANTE: sempre liberar a conex√£o de volta para o pool
        connection.release();
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao conectar com MySQL:', error.message);
        console.log('üìù Certifique-se de que:');
        console.log('   - MySQL est√° rodando');
        console.log('   - Database "encurtador_links" existe');
        console.log('   - Credenciais no arquivo .env est√£o corretas');
        console.log('   - Firewall permite conex√£o na porta MySQL');
        return false;
    }
}

/**
 * Executa uma query SQL de forma segura usando prepared statements
 * Prepared statements previnem SQL Injection automaticamente
 * 
 * @param {string} sql - Query SQL com placeholders (?)
 * @param {Array} params - Par√¢metros para substituir os placeholders
 * @returns {Promise<Array>} Resultado da query
 * 
 * Exemplo de uso:
 * const users = await executeQuery('SELECT * FROM users WHERE id = ?', [userId]);
 */
async function executeQuery(sql, params = []) {
    try {
        // pool.execute() usa prepared statements automaticamente
        // Isso √© mais seguro que pool.query() pois previne SQL injection
        const [results] = await pool.execute(sql, params);
        return results;
        
    } catch (error) {
        console.error('‚ùå Erro na execu√ß√£o da query:', error.message);
        console.error('üìÑ SQL:', sql);
        console.error('üìã Par√¢metros:', params);
        
        // Re-lan√ßa o erro para ser tratado pela camada superior
        throw error;
    }
}

// ========================================
// EXPORTA√á√ïES
// ========================================

module.exports = {
    pool,              // Pool de conex√µes (para uso avan√ßado)
    testConnection,    // Fun√ß√£o para testar conectividade
    executeQuery       // Fun√ß√£o principal para executar queries
};