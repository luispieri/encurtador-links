/**
 * ========================================
 * ARQUIVO PRINCIPAL DO SERVIDOR (index.js)
 * ========================================
 * 
 * Este √© o ponto de entrada da aplica√ß√£o.
 * Aqui configuramos o servidor Express, middlewares e rotas.
 * 
 * Estrutura:
 * 1. Configura√ß√£o de depend√™ncias
 * 2. Configura√ß√£o de middlewares 
 * 3. Defini√ß√£o de rotas
 * 4. Inicializa√ß√£o do servidor
 */

// ========================================
// 1. CONFIGURA√á√ÉO DE DEPEND√äNCIAS
// ========================================

// Carrega vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// Importa as depend√™ncias necess√°rias
const express = require('express');           // Framework web para Node.js
const compression = require('compression');   // Middleware para compress√£o GZIP
const cors = require('cors');                // Middleware para Cross-Origin Resource Sharing
const path = require('path');                // Utilit√°rio para caminhos de arquivos
const { testConnection } = require('./src/config/database'); // Fun√ß√£o para testar conex√£o com BD

// Importa as rotas da aplica√ß√£o
const apiRoutes = require('./src/routes/api');           // Rotas da API p√∫blica
const adminRoutes = require('./src/routes/admin');       // Rotas da API administrativa
const redirectRoutes = require('./src/routes/redirect'); // Rotas de redirecionamento

// ========================================
// 2. CONFIGURA√á√ÉO DO SERVIDOR EXPRESS
// ========================================

const app = express(); // Cria a inst√¢ncia do Express
const PORT = process.env.PORT || 8080; // Define a porta (padr√£o: 8080)

// ========================================
// 3. CONFIGURA√á√ÉO DE MIDDLEWARES
// ========================================

// Compress√£o GZIP - reduz o tamanho das respostas em at√© 70%
app.use(compression()); 

// CORS - permite requisi√ß√µes de outros dom√≠nios (importante para APIs)
app.use(cors());

// JSON Parser - permite receber dados JSON nas requisi√ß√µes
app.use(express.json());

// Servir arquivos est√°ticos da pasta 'public' (HTML, CSS, JS, imagens)
app.use(express.static('public'));

// ========================================
// 4. DEFINI√á√ÉO DE ROTAS
// ========================================

// IMPORTANTE: A ordem das rotas importa!

// Rotas da API p√∫blica (/api/*)
// Exemplos: /api/shorten, /api/stats, /api/manage
app.use('/api', apiRoutes);

// Rota para servir o painel administrativo (p√°gina HTML)
// DEVE vir ANTES das rotas da API admin para evitar conflitos
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// Rotas da API administrativa (/admin/api/*)
// Exemplos: /admin/api/login, /admin/api/stats, /admin/api/urls
app.use('/admin/api', adminRoutes);

// Rota principal - serve a p√°gina inicial
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Rotas de redirecionamento (DEVE ser a √∫ltima!)
// Captura todas as outras rotas e verifica se s√£o c√≥digos de URL
// Exemplo: /abc123 -> redireciona para URL original
app.use('/', redirectRoutes);

// ========================================
// 5. INICIALIZA√á√ÉO DO SERVIDOR
// ========================================

/**
 * Fun√ß√£o para inicializar o servidor de forma ass√≠ncrona
 * Testa a conex√£o com o banco antes de iniciar
 */
async function startServer() {
    try {
        // Testa a conex√£o com o banco de dados
        console.log('üîç Testando conex√£o com banco de dados...');
        const dbConnected = await testConnection();
        
        if (!dbConnected) {
            console.log('‚ö†Ô∏è  Servidor iniciar√° sem conex√£o com banco de dados');
            console.log('   Configure as vari√°veis de ambiente no arquivo .env e reinicie');
        }
        
        // Inicia o servidor na porta especificada
        app.listen(PORT, () => {
            console.log('========================================');
            console.log('üöÄ ENCURTADOR DE LINKS PRO - INICIADO!');
            console.log('========================================');
            console.log(`üåê Servidor rodando em: http://localhost:${PORT}`);
            console.log(`üìä API dispon√≠vel em: http://localhost:${PORT}/api`);
            console.log(`‚öôÔ∏è  Painel admin em: http://localhost:${PORT}/admin`);
            console.log('========================================');
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao iniciar servidor:', error);
        process.exit(1); // Encerra o processo em caso de erro cr√≠tico
    }
}

// Inicia o servidor
startServer();