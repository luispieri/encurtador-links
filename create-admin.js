#!/usr/bin/env node

/**
 * ========================================
 * SCRIPT DE CRIA√á√ÉO DE USU√ÅRIO ADMIN
 * ========================================
 * 
 * Este script permite criar usu√°rios administradores via linha de comando.
 * √â essencial para configura√ß√£o inicial do sistema, pois permite criar
 * o primeiro usu√°rio admin que ter√° acesso ao painel administrativo.
 * 
 * Como usar:
 * node create-admin.js
 * 
 * O script √© interativo e solicitar√°:
 * - Username (√∫nico)
 * - Email (√∫nico)
 * - Nome completo (opcional)
 * - Senha (m√≠nimo 6 caracteres)
 * - Confirma√ß√£o da senha
 */

// Importa√ß√µes necess√°rias
const readline = require('readline');  // Para entrada interativa de dados
require('dotenv').config();           // Carrega vari√°veis de ambiente

const AdminService = require('./src/services/adminService'); // Service para opera√ß√µes admin

// ========================================
// CONFIGURA√á√ÉO DA INTERFACE DE ENTRADA
// ========================================

/**
 * Interface readline para capturar entrada do usu√°rio no terminal
 * Permite fazer perguntas e receber respostas de forma interativa
 */
const rl = readline.createInterface({
    input: process.stdin,   // Entrada padr√£o (teclado)
    output: process.stdout  // Sa√≠da padr√£o (terminal)
});

// ========================================
// FUN√á√ïES UTILIT√ÅRIAS
// ========================================

/**
 * Faz uma pergunta ao usu√°rio e aguarda resposta
 * 
 * @param {string} question - Pergunta a ser exibida
 * @returns {Promise<string>} Resposta do usu√°rio
 */
const prompt = (question) => {
    return new Promise((resolve) => {
        rl.question(question, resolve);
    });
};

/**
 * Captura senha do usu√°rio de forma oculta (mostra asteriscos)
 * Implementa entrada de senha segura no terminal
 * 
 * @param {string} question - Pergunta a ser exibida
 * @returns {Promise<string>} Senha digitada pelo usu√°rio
 */
const promptPassword = (question) => {
    return new Promise((resolve) => {
        rl.question(question, (password) => {
            resolve(password);
        });
        
        // Sobrescreve fun√ß√£o de output para ocultar caracteres da senha
        rl._writeToOutput = function _writeToOutput(stringToWrite) {
            if (stringToWrite.charCodeAt(0) === 13) {      // Enter pressionado
                rl.output.write('\n');
            } else if (stringToWrite.charCodeAt(0) === 8) { // Backspace pressionado
                rl.output.write('\b \b');
            } else {                                       // Qualquer outro caractere
                rl.output.write('*');                      // Mostra asterisco
            }
        };
    });
};

// ========================================
// FUN√á√ÉO PRINCIPAL
// ========================================

/**
 * Fun√ß√£o principal que orquestra todo o processo de cria√ß√£o de usu√°rio admin
 * Implementa valida√ß√µes, coleta de dados e cria√ß√£o do usu√°rio
 */
async function createAdminUser() {
    try {
        // === HEADER DO SCRIPT ===
        console.log('========================================');
        console.log('  CRIA√á√ÉO DE USU√ÅRIO ADMINISTRADOR');
        console.log('========================================\n');
        
        // === COLETA DE DADOS B√ÅSICOS ===
        
        // Solicitar username
        const username = await prompt('Username: ');
        if (!username.trim()) {
            console.log('‚ùå Erro: Username √© obrigat√≥rio');
            process.exit(1);
        }
        
        // Solicitar email
        const email = await prompt('Email: ');
        if (!email.trim()) {
            console.log('‚ùå Erro: Email √© obrigat√≥rio');
            process.exit(1);
        }
        
        // Solicitar nome completo (opcional)
        const fullName = await prompt('Nome completo (opcional): ');
        
        // === VALIDA√á√ïES ===
        
        // Validar formato do email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            console.log('‚ùå Erro: Email inv√°lido');
            process.exit(1);
        }
        
        // === COLETA E VALIDA√á√ÉO DE SENHA ===
        
        console.log('\nSenha (m√≠nimo 6 caracteres):');
        const password = await promptPassword('');
        
        // Restaura fun√ß√£o normal de output ap√≥s captura da senha
        rl._writeToOutput = function _writeToOutput(stringToWrite) {
            rl.output.write(stringToWrite);
        };
        
        // Validar comprimento da senha
        if (!password || password.length < 6) {
            console.log('\n‚ùå Erro: Senha deve ter pelo menos 6 caracteres');
            process.exit(1);
        }
        
        // === CONFIRMA√á√ÉO DE SENHA ===
        
        console.log('\nConfirme a senha:');
        const confirmPassword = await promptPassword('');
        
        // Restaura fun√ß√£o normal de output novamente
        rl._writeToOutput = function _writeToOutput(stringToWrite) {
            rl.output.write(stringToWrite);
        };
        
        // Verificar se senhas coincidem
        if (password !== confirmPassword) {
            console.log('\n‚ùå Erro: Senhas n√£o coincidem');
            process.exit(1);
        }
        
        // === CRIA√á√ÉO DO USU√ÅRIO ===
        
        console.log('\n‚è≥ Criando usu√°rio administrador...');
        
        // Chama o service para criar o usu√°rio
        const result = await AdminService.createUser({
            username: username.trim(),
            email: email.trim(),
            password,
            fullName: fullName.trim() || null
        });
        
        // === RESULTADO DA OPERA√á√ÉO ===
        
        if (result.success) {
            console.log('\n========================================');
            console.log('‚úÖ USU√ÅRIO ADMINISTRADOR CRIADO!');
            console.log('========================================');
            console.log(`üÜî ID: ${result.userId}`);
            console.log(`üë§ Username: ${result.username}`);
            console.log(`üìß Email: ${result.email}`);
            if (result.fullName) {
                console.log(`üìù Nome: ${result.fullName}`);
            }
            console.log('\nüîó Agora voc√™ pode acessar o painel admin em:');
            console.log('   http://localhost:8080/admin');
            console.log('========================================');
            
        } else {
            console.log(`\n‚ùå Erro ao criar usu√°rio: ${result.error}`);
            process.exit(1);
        }
        
    } catch (error) {
        console.error('\n‚ùå Erro inesperado:', error.message);
        console.error('üí° Dica: Verifique se o banco de dados est√° configurado corretamente');
        process.exit(1);
        
    } finally {
        // Sempre fecha a interface readline
        rl.close();
    }
}

// ========================================
// EXECU√á√ÉO DO SCRIPT
// ========================================

// Verifica se o script foi chamado diretamente (n√£o importado)
if (require.main === module) {
    createAdminUser();
}

// Exporta a fun√ß√£o para uso em outros m√≥dulos (se necess√°rio)
module.exports = createAdminUser;